def rootProjectDir = rootDir.parent

class PublishModule {
    Library library

    void library(Action<Library> action) {
        library = new Library()
        action.execute(library)
    }
}

class Library {
    String groupId
    String moduleName
    String version
    String description
    String url
}

def mavenFileName = "maven.properties"
def localFileName = "local.properties"

println "Reading $mavenFileName and $localFileName..."

def mavenProp = new Properties()
def localProp = new Properties()

def mis
def lis

try {
    def mavenFile = new File("${rootProjectDir}/${mavenFileName}")
    if (mavenFile.exists()) {
        mis = new FileInputStream(mavenFile)
        mavenProp.load(mis)
        println "Success to read $mavenFileName."
    }

    def localFile = new File("${rootProjectDir}/${localFileName}")
    if (localFile.exists()) {
        lis = new FileInputStream(localFile)
        localProp.load(lis)
        println "Success to read $localFileName."
    }

    if (mavenFile.exists() && localFile.exists()) {
        def snapshotRepoUrl = mavenProp.getProperty('repo.snapshotUrl')
        def releaseRepoUrl = mavenProp.getProperty('repo.releaseUrl')
        def licenseName = mavenProp.getProperty('license.name')
        def licenseUrl = mavenProp.getProperty('license.url')
        def developerName = mavenProp.getProperty('developer.name')
        def developerEmail = mavenProp.getProperty('developer.email')
        def gitRepoUrl = mavenProp.getProperty('git.repoUrl')

        def signingId = localProp.getProperty('signing.keyId')
        def signingPassword = localProp.getProperty('signing.password')
        def signingPath = localProp.getProperty('signing.path')
        def sonatypeUsername = localProp.getProperty('sonatype.username')
        def sonatypePassword = localProp.getProperty('sonatype.password')

        extensions.create("publishModule", PublishModule)

        afterEvaluate {
            if (publishModule.library != null) {
                println "Module $name has configuration that can publish to maven."

                apply plugin: 'maven-publish'
                apply plugin: 'signing'

                ext."signing.keyId" = signingId
                ext."signing.password" = signingPassword
                ext."signing.secretKeyRingFile" = signingPath

                task androidSourcesJar(type: Jar) {
                    archiveClassifier.set('sources')
                    from android.sourceSets.main.java.source
                }

                publishing {
                    repositories {
                        maven {
                            name = "AndroidLibraries"
                            url = version.endsWith('SNAPSHOT') ? snapshotRepoUrl : releaseRepoUrl
                            println "Maven repo url: $url"

                            credentials {
                                username sonatypeUsername
                                password sonatypePassword
                            }
                        }
                    }
                    publications {
                        release(MavenPublication) {
                            groupId = publishModule.library.groupId
                            artifactId = publishModule.library.moduleName
                            version = publishModule.library.version

                            def artifactOutputPath = "$buildDir/outputs/aar/${project.getName()}-release.aar"
                            artifact(artifactOutputPath)
                            artifact androidSourcesJar

                            println "groupId: $publishModule.library.groupId"
                            println "artifactId: $publishModule.library.moduleName"
                            println "version: $publishModule.library.version"

                            pom {
                                name = publishModule.library.moduleName
                                description = publishModule.library.description
                                url = publishModule.library.url

                                println "description: $publishModule.library.description"
                                println "url: $publishModule.library.url"

                                licenses {
                                    license {
                                        name = licenseName
                                        url = licenseUrl
                                    }
                                }
                                developers {
                                    developer {
                                        id = developerName
                                        name = developerName
                                        email = developerEmail
                                        println "developerName: $developerName"
                                        println "developerEmail: $developerEmail"
                                    }
                                }
                                scm {
                                    connection = "scm:git:${gitRepoUrl}.git"
                                    developerConnection = "scm:git:ssh://${gitRepoUrl}.git"
                                    url = "https://${gitRepoUrl}/tree/master"
                                }
                                def api = project.configurations.api.allDependencies
                                if (!api.isEmpty()) {
                                    withXml {
                                        def dependenciesNode = asNode().appendNode('dependencies')

                                        api.each {
                                            def dependencyNode = dependenciesNode.appendNode('dependency')
                                            dependencyNode.appendNode('groupId', it.group)
                                            dependencyNode.appendNode('artifactId', it.name)
                                            dependencyNode.appendNode('version', it.version)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                signing {
                    sign publishing.publications
                }
            }
        }
    }
} catch (Exception e) {
    println "Failed to read properties."
    println e
} finally {
    if (mis != null) {
        mis.close()
    }
    if (lis != null) {
        lis.close()
    }
}