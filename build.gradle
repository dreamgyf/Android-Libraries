// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '7.2.1' apply false
    id 'com.android.library' version '7.2.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.6.10' apply false
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

class PublishModule {
    String groupId
    String moduleName
    String version
    String description
    String url
    boolean includeDependencies = false
}

def mavenFileName = "maven.properties"
def localFileName = "local.properties"

println "Reading $mavenFileName and $localFileName..."

def mavenProp = new Properties()
def localProp = new Properties()

def mis
def lis

try {
    def mavenFile = rootProject.file(mavenFileName)
    if (mavenFile.exists()) {
        mis = new FileInputStream(mavenFile)
        mavenProp.load(mis)
        println "Success to read $mavenFileName."
    }

    def localFile = rootProject.file(localFileName)
    if (localFile.exists()) {
        lis = new FileInputStream(localFile)
        localProp.load(lis)
        println "Success to read $localFileName."
    }

    if (mavenFile.exists() && localFile.exists()) {
        def snapshotRepoUrl = mavenProp.getProperty('repo.snapshotUrl')
        def releaseRepoUrl = mavenProp.getProperty('repo.releaseUrl')
        def licenseName = mavenProp.getProperty('license.name')
        def licenseUrl = mavenProp.getProperty('license.url')
        def developerName = mavenProp.getProperty('developer.name')
        def developerEmail = mavenProp.getProperty('developer.email')
        def gitRepoUrl = mavenProp.getProperty('git.repoUrl')

        def signingId = localProp.getProperty('signing.keyId')
        def signingPassword = localProp.getProperty('signing.password')
        def signingPath = localProp.getProperty('signing.path')
        def sonatypeUsername = localProp.getProperty('sonatype.username')
        def sonatypePassword = localProp.getProperty('sonatype.password')

        subprojects {
            println "Set maven publish for $displayName"
            extensions.create("publishModule", PublishModule)
            apply plugin: 'maven-publish'
            apply plugin: 'signing'

            afterEvaluate {
                if (publishModule.moduleName != null) {
                    println "Module $name has configuration that can publish to maven."

                    ext."signing.keyId" = signingId
                    ext."signing.password" = signingPassword
                    ext."signing.secretKeyRingFile" = signingPath

                    task androidSourcesJar(type: Jar) {
                        archiveClassifier.set('sources')
                        from android.sourceSets.main.java.source
                    }

                    publishing {
                        repositories {
                            maven {
                                name = "AndroidLibraries"
                                url = version.endsWith('SNAPSHOT') ? snapshotRepoUrl : releaseRepoUrl
                                println "Maven repo url: $url"

                                credentials {
                                    username sonatypeUsername
                                    password sonatypePassword
                                }
                            }
                        }
                        publications {
                            release(MavenPublication) {
                                groupId = publishModule.groupId
                                artifactId = publishModule.moduleName
                                version = publishModule.version

                                def artifactOutputPath = "$buildDir/outputs/aar/${project.getName()}-release.aar"
                                artifact(artifactOutputPath)
                                artifact androidSourcesJar

                                println "groupId: $groupId"
                                println "artifactId: $artifactId"
                                println "version: $version"
                                println "artifactOutputPath: $artifactOutputPath"

                                pom {
                                    name = publishModule.moduleName
                                    description = publishModule.description
                                    url = publishModule.url

                                    println "description: $publishModule.description"
                                    println "url: $publishModule.url"

                                    licenses {
                                        license {
                                            name = licenseName
                                            url = licenseUrl
                                            println "license: $licenseName"
                                            println "licenseUrl: $licenseUrl"
                                        }
                                    }
                                    developers {
                                        developer {
                                            id = developerName
                                            name = developerName
                                            email = developerEmail
                                            println "developerName: $developerName"
                                            println "developerEmail: $developerEmail"
                                        }
                                    }
                                    scm {
                                        connection = "scm:git:${gitRepoUrl}.git"
                                        developerConnection = "scm:git:ssh://${gitRepoUrl}.git"
                                        url = "https://${gitRepoUrl}/tree/master"
                                        println "gitRepoUrl: https://${gitRepoUrl}"
                                    }
                                    if (publishModule.includeDependencies) {
                                        withXml {
                                            def dependenciesNode = asNode().appendNode('dependencies')

                                            project.configurations.implementation.allDependencies.each {
                                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                                dependencyNode.appendNode('groupId', it.group)
                                                dependencyNode.appendNode('artifactId', it.name)
                                                dependencyNode.appendNode('version', it.version)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    signing {
                        sign publishing.publications
                    }
                }
            }
        }
    }
} catch (Exception e) {
    println "Failed to read properties."
    println e
} finally {
    if (mis != null) {
        mis.close()
    }
    if (lis != null) {
        lis.close()
    }
}